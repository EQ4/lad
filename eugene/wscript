#!/usr/bin/env python
import os
import subprocess
import waflib.Options as Options
import waflib.extras.autowaf as autowaf

# Version of this package (even if built as a child)
EUGENE_VERSION = '0.0.0'

# Library version (UNIX style major, minor, micro)
# major increment <=> incompatible changes
# minor increment <=> compatible changes (additions)
# micro increment <=> no interface changes
# Version history:
#   0.0.0 = 0,0,0
EUGENE_LIB_VERSION = '0.0.0'

# Variables for 'waf dist'
APPNAME = 'eugene'
VERSION = EUGENE_VERSION

# Mandatory variables
top = '.'
out = 'build'

def options(opt):
    opt.load('compiler_cxx')
    autowaf.set_options(opt)
    opt.add_option('--no-gui', action='store_true', dest='no_gui',
                   help='Do not build GUI')

def configure(conf):
    conf.load('compiler_cxx')
    autowaf.configure(conf)
    autowaf.display_header('Eugene Configuration')

    conf.check_cxx(cxxflags=["-std=c++0x"])
    conf.env.append_unique('CXXFLAGS', ['-std=c++0x'])

    conf.env.BUILD_GUI = not Options.options.no_gui
    if conf.env.BUILD_GUI:
        autowaf.check_pkg(conf, 'ganv-1', uselib_store='GANV',
                          atleast_version='1.0.0', mandatory=True)
        autowaf.check_pkg(conf, 'glibmm-2.4', uselib_store='GLIBMM',
                          atleast_version='2.14.0', mandatory=True)
        autowaf.check_pkg(conf, 'gthread-2.0', uselib_store='GTHREAD',
                          atleast_version='2.16.0', mandatory=True)
        autowaf.check_pkg(conf, 'gtkmm-2.4', uselib_store='GTKMM',
                          atleast_version='2.16.0', mandatory=True)
        autowaf.check_pkg(conf, 'ganv-0', uselib_store='GANV',
                          mandatory=True)

    autowaf.define(conf, 'EUGENE_DATA_DIR',
                   os.path.join(conf.env.PREFIX, 'share', 'eugene'))
    conf.write_config_header('eugene_config.h', remove=False)

def build(bld):
    # Headers
    bld.install_files('${INCLUDEDIR}/eugene', bld.path.ant_glob('eugene/*.hpp'))

    # Pkgconfig file
    autowaf.build_pc(bld, 'EUGENE', EUGENE_VERSION, '', 'GLIBMM GTHREAD')

    # Library
    obj = bld(features = 'cxx cxxshlib')
    obj.source = '''
            src/LABS.cpp
            src/TSP.cpp
    '''
    obj.export_includes = ['.']
    obj.includes        = ['.', './src']
    obj.name            = 'libeugene'
    obj.target          = 'eugene'
    obj.uselib          = 'GLIBMM GTHREAD'
    obj.vnum            = EUGENE_LIB_VERSION
    obj.install_path    = '${LIBDIR}'

    # Console app
    prog = bld(features = 'cxx cxxprogram')
    prog.source       = 'src/eugene.cpp'
    prog.includes      = ['.', './src']
    prog.use          = 'libeugene'
    prog.target       = 'src/eugene'
    prog.install_path = '${BINDIR}'

    # GUI app
    if bld.env.BUILD_GUI:
        prog = bld(features = 'cxx cxxprogram')
        prog.source = '''
            gui/MainWindow.cpp
            gui/TSPCanvas.cpp
            gui/eugene_tsp_gui.cpp
    	'''
        prog.includes      = ['.', './src', './gui']
        prog.use          = 'libeugene'
        prog.uselib       = 'GTKMM GLADEMM GTHREAD  GANV'
        prog.target       = 'gui/eugene_tsp_gui'
        prog.install_path = '${BINDIR}'

    bld.install_files('${PREFIX}/share/eugene', 'gui/eugene_tsp_gui.ui')

    bld.add_post_fun(autowaf.run_ldconfig)

def lint(ctx):
    subprocess.call('cpplint.py --filter=-whitespace/comments,-whitespace/tab,-whitespace/braces,-whitespace/labels,-build/header_guard,-readability/casting,-readability/todo,-build/namespaces,-whitespace/line_length,-runtime/rtti,-runtime/references,-whitespace/blank_line,-runtime/sizeof,-readability/streams,-whitespace/operators,-whitespace/parens,-build/include,-whitespace/comma,-whitespace/newline `find -name *.cpp -or -name *.hpp`', shell=True)
