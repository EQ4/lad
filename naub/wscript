#!/usr/bin/env python
from waflib.extras import autowaf as autowaf

# Version of this package (even if built as a child)
NAUB_VERSION       = '0.0.0'
NAUB_MAJOR_VERSION = '0'

# Library version (UNIX style major, minor, micro)
# major increment <=> incompatible changes
# minor increment <=> compatible changes (additions)
# micro increment <=> no interface changes
# Naub uses the same version number for both library and package
NAUB_LIB_VERSION = NAUB_VERSION

# Variables for 'waf dist'
APPNAME = 'naub'
VERSION = NAUB_VERSION

# Mandatory variables
top = '.'
out = 'build'

def options(opt):
    autowaf.set_options(opt)
    opt.load('compiler_c')

def configure(conf):
    conf.line_just = 31
    conf.load('compiler_c')
    autowaf.configure(conf)
    autowaf.display_header('Naub Configuration')

    autowaf.check_pkg(conf, 'libusb-1.0',  uselib_store='USB', mandatory=True)
    autowaf.define(conf, 'NAUB_VERSION', NAUB_VERSION)

    conf.env.INCLUDES_NAUB = ['%s/naub-%s' % (conf.env.INCLUDEDIR,
                                                 NAUB_MAJOR_VERSION)]
    conf.env.LIBPATH_NAUB = [conf.env.LIBDIR]
    conf.env.LIB_NAUB = ['naub-%s' % NAUB_MAJOR_VERSION];

    print('')

def build(bld):
    # C Headers
    includedir = '${INCLUDEDIR}/naub-%s/naub' % NAUB_MAJOR_VERSION
    bld.install_files(includedir, bld.path.ant_glob('naub/*.h'))

    # Pkgconfig file
    autowaf.build_pc(bld, 'NAUB', NAUB_VERSION, NAUB_MAJOR_VERSION, [],
                     {'NAUB_MAJOR_VERSION' : NAUB_MAJOR_VERSION})

    lib_source = [
        'src/launchpad.c',
        'src/naub.c',
        'src/nocturn.c'
        ]

    libflags = [ '-fvisibility=hidden' ]
    if bld.env.MSVC_COMPILER:
        libflags = []

    # Shared Library
    bld(features        = 'c cshlib',
        export_includes = ['.'],
        source          = lib_source,
        includes        = ['.', './src'],
        name            = 'libnaub',
        target          = 'naub-%s' % NAUB_MAJOR_VERSION,
        vnum            = NAUB_LIB_VERSION,
        uselib          = ['USB'],
        install_path    = '${LIBDIR}',
        defines         = ['NAUB_SHARED', 'NAUB_INTERNAL'],
        cflags          = libflags)

    # Stand-alone binary
    bld(features     = 'c cprogram',
        source       = lib_source + ['src/naub_test.c'],
        target       = bld.path.get_bld().make_node('naub'),
        includes     = ['.', './src'],
        uselib       = ['USB'],
        install_path = '${BINDIR}')
